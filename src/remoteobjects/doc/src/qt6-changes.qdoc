/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page remoteobjects-changes-qt6.html
    \title Porting to Qt 6 - Qt Remote Objects
    \ingroup porting-guides-5-to-6
    \brief Migrate Qt Remote Objects to Qt 6.

    Qt 6 is a result of the conscious effort to make the framework more
    efficient and easy to use.

    We try to maintain binary and source compatibility for all the public
    APIs in each release. But some changes were inevitable in an effort to
    make Qt a better framework.

    In this topic we summarize those changes in Qt Remote Objects, and provide
    guidance to handle them.

    \section1 API changes

    \section2 Functions taking const-ref QString changing to QStringView

    QRemoteObjectHostBase::proxy, QRemoteObjectHostBase::reverseProxy and
    QRemoteObjectNode::instances now accept a QStringView instead
    of \c{const QString &}. The largest difference caused by this is that it
    no longer accepts implicit conversion from string literals
    (i.e. \c{node.instances("abc");}). Instead, you could use a UTF-16
    string literal (\c{node.instances(u"abc")}).

    \section1 CMake changes

    The \c cmake instructions for calling \l repc and adding the generated
    \c .rep files to a CMake project have slightly changed. Instead of the
    \c qt5_generate_repc macro, you should now use \c qt6_add_repc_source,
    \c qt6_add_repc_replica and \c qt6_add_repc_merged functions.
    For example, the following code:

    \code
    set(SOURCES
        main.cpp
        simpleswitch.cpp
    )

    qt5_generate_repc(SOURCES simpleswitch.rep SOURCE)
    add_executable(directconnectserver ${SOURCES})
    \endcode

    Should change to:

    \code
    set(SOURCES
        main.cpp
        simpleswitch.cpp
    )
    add_executable(directconnectserver ${SOURCES})
    qt6_add_repc_source(directconnectserver simpleswitch.rep)
    \endcode

    More detailed descriptions for these CMake functions can be found
    \l {CMake functions} {here}.
*/
